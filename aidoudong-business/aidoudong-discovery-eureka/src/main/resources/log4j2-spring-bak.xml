<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="FATAL" monitorInterval="600">
    <!--全局属性-->
    <Properties>
        <Property name="APP_NAME">aidoudong-discovery-eureka</Property>
        <Property name="LOG_FILE_PATH">f:/tmp/log4j2/${APP_NAME}</Property>
        <Property name="PATTERN_FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %class{36} (%L) %M - %msg%xEx%n</Property>
    </Properties>
    <Appenders>
        <!--输出到控制台-->
        <Console name="Console" target="SYSTEM_OUT">
        	<!--
		                设置 onMismatch="NEUTRAL" 可以让日志经过后续的过滤器
		                最后一个过滤器建议设置 onMismatch="DENY", 不然日志就输出了。
            -->
            <Filters>
            	<!-- <RegexFilter level="debug" regex="* org.apache.ibatis.logging.jdbc.BaseJdbcLogger *" onMatch="NEUTRAL" onMismatch="NEUTRAL"/> -->
                <ClassPathFilter pathName=".repository." onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
				<!-- <ThresholdFilter regex=".* org.apache.ibatis.logging.jdbc.BaseJdbcLogger .*" level="debug" onMatch="DENY" onMismatch="DENY"/> -->
            </Filters>
            <PatternLayout pattern="${PATTERN_FORMAT}"/>
        </Console>


        <!--输出到文件 用来定义超过指定大小自动删除旧的创建新的的Appender.-->
        <RollingFile name="RollingInfoFile" fileName="${LOG_FILE_PATH}/info.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/info-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
        
        
        <!--输出警告日志到文件-->
        <RollingFile name="RollingWarnFile" fileName="${LOG_FILE_PATH}/warn.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/warn-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!--输出错误日志到文件-->
        <RollingFile name="RollingErrorFile" fileName="${LOG_FILE_PATH}/error.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/error-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
        
        
        <!--输出sql日志到文件-->
        <RollingFile name="RollingSqlFile" fileName="${LOG_FILE_PATH}/sql.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/sql-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!-- <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
        
        
    </Appenders>

    <Loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        
 		<Logger name="org.hibernate.SQL" level="debug" additivity="false">
			<AppenderRef ref="Console"/>
            <AppenderRef ref="RollingSqlFile"/>
 		</Logger>
		
		<Logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="trace" additivity="false">
			<AppenderRef ref="Console"/>
            <AppenderRef ref="RollingSqlFile"/>
		</Logger>
		
        <Logger name="com.aidoudong.repository" level="debug" additivity="false">
        	<AppenderRef ref="Console"/>
            <AppenderRef ref="RollingSqlFile"/>
        </Logger>
        
		<logger name="jdbc.sqltiming" level="INFO">
         	<appender-ref ref="hibernate.sql" /> <!-- 这里要替换成自己的 -->
     	</logger>     
     	<logger name="jdbc.resultsettable" level="OFF"></logger>
     	<logger name="jdbc.sqlonly" level="OFF"></logger>
     	<logger name="jdbc.audit" level="OFF"></logger>
     	<logger name="jdbc.resultset" level="OFF"></logger>
     	<logger name="jdbc.connection" level="OFF"></logger>
     	
        <!-- LOG "com.aidoudong*" at TRACE level -->
        <!-- <Logger name="com.aidoudong*" level="INFO"/> -->

        <!-- LOG everything at INFO level -->
        <Root level="ALL">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingInfoFile"/>
            <AppenderRef ref="RollingWarnFile"/>
            <AppenderRef ref="RollingErrorFile"/>
        </Root>
    </Loggers>

</Configuration>

spring:
  session:
    store-type: redis # session存储方式采用redis
  redis:
    host: 192.168.2.160
    port: 6379
    password: 123456
    database: 15
    timeout: 2000 # 连接或读取超时时长（毫秒）
  jpa:
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  datasource:
    druid:
      oauth2:
        url: jdbc:mysql://192.168.2.160:3306/oauth2?useUnicode=true&characterEncoding=utf-8&useSSL=false
        driver-class-name: com.mysql.jdbc.Driver # 驱动（根据url自动识别）这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)
        username: root # 链接数据库的用户名
        password: 123456 # 链接数据库的用户密码，如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。  
        initial-size: 1 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
        min-idle: 1 # 最小链接池数量
        max-active: 20 # 最大连接池数量（缺省值：8）
        max-wait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
        time-between-eviction-runs-millis: 60000 # 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位是毫秒
        validation-query: select 'x' # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
        connection-init-sqls: select 1 from dual # 物理连接初始化的时候执行的sql
        test-while-idle: true # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        test-on-return: false # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
        pool-prepared-statements: false # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)
        max-open-prepared-statements: -1 # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
        max-pool-prepared-statement-per-connection-size: 20
        use-global-data-source-stat: true # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
        filters: stat, wall #druid防火墙 执行sql的时候要注释掉
      business:
        url: jdbc:mysql://192.168.2.160:3306/business?useUnicode=true&characterEncoding=utf-8&useSSL=false
        driver-class-name: com.mysql.jdbc.Driver # 驱动（根据url自动识别）这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)
        username: root # 链接数据库的用户名
        password: 123456 # 链接数据库的用户密码，如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。  
        initial-size: 1 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
        min-idle: 1 # 最小链接池数量
        max-active: 20 # 最大连接池数量（缺省值：8）
        max-wait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
        time-between-eviction-runs-millis: 60000 # 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位是毫秒
        validation-query: select 'x' # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
        connection-init-sqls: select 1 from dual # 物理连接初始化的时候执行的sql
        test-while-idle: true # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        test-on-return: false # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
        pool-prepared-statements: false # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)
        max-open-prepared-statements: -1 # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
        max-pool-prepared-statement-per-connection-size: 20
        use-global-data-source-stat: true # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
        filters: stat, wall #druid防火墙 执行sql的时候要注释掉
      filter: 
        stat: # 监控统计
          db-type: mysql # 数据库类型
          log-slow-sql: true # 慢SQL
          slow-sql-millis: 2000 # 慢SQL执行时间
        wall: 
          enabled: true
          db-type: mysql
          config:
            delete-allow: true
            drop-table-allow: false
      stat-view-servlet: # 是否启用statViewServlet配置
        enabled: true
        url-pattern: "/druid/*" # 访问监控页面
        reset-enable: false # 禁止手动重置监控数据
        login-username: ldd # 设置监控页面的登陆名
        login-password: 123456 # 设置监控页面的登陆密码
      web-stat-filter: #WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
        enabled: true # 是否启用WebStatFilter
        url-pattern: "/*" # 访问路径
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*" # 排除不必要的url
        session-stat-max-count: 1000 # 监控最大session数，默认是1000
        session-stat-enable: true # 是否启用session的统计功能
        profile-enable: true # 是否启用监控单个Url调用的sql列表
        principal-session-name: session_user_key # 使druid当前session的用户是谁，session_user_key是你保存到session中的sessionName
        principal-cookie-name: cookie_user_key # 使druid只当当前的user是谁,cookie_user_key是你保存在cookie中的cookieName

  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 25MB
mybatis-plus:
  type-aliases-package: com.aidoudong.entity
  mapper-locations: classpath:mapper/**
  configuration:
    map-underscore-to-camel-case: true
    safe-row-bounds-enabled: true
    lazy-loading-enabled: false
    cache-enabled: true
    aggressive-lazy-loading: true
    multiple-result-sets-enabled: true
# 日志级别，会打印sql语句
logging:
  level:
    com.aidoudong.dao.oauth2.mapper: debug
    
    